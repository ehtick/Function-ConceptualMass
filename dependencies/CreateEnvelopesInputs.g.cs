// This code was generated by Hypar.
// Edits to this code will be overwritten the next time you run 'hypar init'.
// DO NOT EDIT THIS FILE.

using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Validators;
using Elements.Serialization.JSON;
using Hypar.Functions;
using Hypar.Functions.Execution;
using Hypar.Functions.Execution.AWS;
using Hypar.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace CreateEnvelopes
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public  class CreateEnvelopesInputs : S3Args
    
    {
        [Newtonsoft.Json.JsonConstructor]
        
        public CreateEnvelopesInputs(Overrides @overrides, string bucketName, string uploadsBucket, Dictionary<string, string> modelInputKeys, string gltfKey, string elementsKey, string ifcKey):
        base(bucketName, uploadsBucket, modelInputKeys, gltfKey, elementsKey, ifcKey)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<CreateEnvelopesInputs>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @overrides});
            }
        
            this.Overrides = @overrides ?? this.Overrides;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("overrides", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Overrides Overrides { get; set; } = new Overrides();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class Overrides 
    
    {
        public Overrides() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public Overrides(OverrideAdditions @additions, OverrideRemovals @removals, IList<MassingOverride> @massing, IList<MassingStrategySettingsOverride> @massingStrategySettings)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<Overrides>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @additions, @removals, @massing, @massingStrategySettings});
            }
        
            this.Additions = @additions ?? this.Additions;
            this.Removals = @removals ?? this.Removals;
            this.Massing = @massing ?? this.Massing;
            this.MassingStrategySettings = @massingStrategySettings ?? this.MassingStrategySettings;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Additions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideAdditions Additions { get; set; } = new OverrideAdditions();
    
        [Newtonsoft.Json.JsonProperty("Removals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OverrideRemovals Removals { get; set; } = new OverrideRemovals();
    
        [Newtonsoft.Json.JsonProperty("Massing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassingOverride> Massing { get; set; } = new List<MassingOverride>();
    
        [Newtonsoft.Json.JsonProperty("Massing Strategy Settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassingStrategySettingsOverride> MassingStrategySettings { get; set; } = new List<MassingStrategySettingsOverride>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class OverrideAdditions 
    
    {
        public OverrideAdditions() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideAdditions(IList<MassingOverrideAddition> @massing)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideAdditions>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @massing});
            }
        
            this.Massing = @massing ?? this.Massing;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Massing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassingOverrideAddition> Massing { get; set; } = new List<MassingOverrideAddition>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class OverrideRemovals 
    
    {
        public OverrideRemovals() { }
        
        [Newtonsoft.Json.JsonConstructor]
        public OverrideRemovals(IList<MassingOverrideRemoval> @massing)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<OverrideRemovals>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @massing});
            }
        
            this.Massing = @massing ?? this.Massing;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Massing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<MassingOverrideRemoval> Massing { get; set; } = new List<MassingOverrideRemoval>();
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingOverride(string @id, MassingIdentity @identity, MassingValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingStrategySettingsOverride 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingStrategySettingsOverride(string @id, MassingStrategySettingsIdentity @identity, MassingStrategySettingsValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingStrategySettingsOverride>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingStrategySettingsIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingStrategySettingsValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingOverrideAddition 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingOverrideAddition(string @id, MassingIdentity @identity, MassingOverrideAdditionValue @value)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingOverrideAddition>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity, @value});
            }
        
            this.Id = @id;
            this.Identity = @identity;
            this.Value = @value;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingIdentity Identity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingOverrideAdditionValue Value { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingOverrideRemoval 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingOverrideRemoval(string @id, MassingIdentity @identity)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingOverrideRemoval>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @id, @identity});
            }
        
            this.Id = @id;
            this.Identity = @identity;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Identity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MassingIdentity Identity { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingIdentity(string @addId)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @addId});
            }
        
            this.AddId = @addId;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Add Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddId { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingValue(Profile @boundary, double? @floorToFloorHeight, IList<double> @floorToFloorHeights, int? @levels, MassingValueMassingStrategy? @massingStrategy)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary, @floorToFloorHeight, @floorToFloorHeights, @levels, @massingStrategy});
            }
        
            this.Boundary = @boundary;
            this.FloorToFloorHeight = @floorToFloorHeight;
            this.FloorToFloorHeights = @floorToFloorHeights;
            this.Levels = @levels;
            this.MassingStrategy = @massingStrategy;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The extents of the mass. If using a massing strategy other than "Full", this denotes the boundary which constrains the massing option.</summary>
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Boundary { get; set; }
    
        /// <summary>What should the default floor-to-floor height for this portion of the mass be?</summary>
        [Newtonsoft.Json.JsonProperty("Floor to Floor Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2D, double.MaxValue)]
        public double? FloorToFloorHeight { get; set; }
    
        /// <summary>Manage the per-level floor-to-floor heights.</summary>
        [Newtonsoft.Json.JsonProperty("Floor To Floor Heights", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<double> FloorToFloorHeights { get; set; }
    
        /// <summary>How many levels should this portion of the mass be?</summary>
        [Newtonsoft.Json.JsonProperty("Levels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public int? Levels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Massing Strategy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MassingValueMassingStrategy? MassingStrategy { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingStrategySettingsIdentity 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingStrategySettingsIdentity(string @addId)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingStrategySettingsIdentity>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @addId});
            }
        
            this.AddId = @addId;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Add Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddId { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingStrategySettingsValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingStrategySettingsValue(double? @barWidth, IList<Line> @skeleton)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingStrategySettingsValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @barWidth, @skeleton});
            }
        
            this.BarWidth = @barWidth;
            this.Skeleton = @skeleton;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        [Newtonsoft.Json.JsonProperty("Bar Width", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? BarWidth { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Skeleton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Line> Skeleton { get; set; }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    
    public partial class MassingOverrideAdditionValue 
    
    {
        [Newtonsoft.Json.JsonConstructor]
        public MassingOverrideAdditionValue(Profile @boundary, IList<Line> @centerline, double? @floorToFloorHeight, int @levels, MassingOverrideAdditionValueMode @mode)
        {
            var validator = Validator.Instance.GetFirstValidatorForType<MassingOverrideAdditionValue>();
            if(validator != null)
            {
                validator.PreConstruct(new object[]{ @boundary, @centerline, @floorToFloorHeight, @levels, @mode});
            }
        
            this.Boundary = @boundary;
            this.Centerline = @centerline;
            this.FloorToFloorHeight = @floorToFloorHeight;
            this.Levels = @levels;
            this.Mode = @mode;
        
            if(validator != null)
            {
                validator.PostConstruct(this);
            }
        }
    
        /// <summary>The extents of the envelope. If using a massing strategy other than "Full", this denotes the boundary which constrains the massing option.</summary>
        [Newtonsoft.Json.JsonProperty("Boundary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Profile Boundary { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Centerline", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IList<Line> Centerline { get; set; }
    
        /// <summary>What should the default floor-to-floor height for this portion of the mass be?</summary>
        [Newtonsoft.Json.JsonProperty("Floor to Floor Height", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(2D, double.MaxValue)]
        public double? FloorToFloorHeight { get; set; }
    
        /// <summary>How many levels should this portion of the mass be?</summary>
        [Newtonsoft.Json.JsonProperty("Levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Levels { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MassingOverrideAdditionValueMode Mode { get; set; } = MassingOverrideAdditionValueMode.Boundary;
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MassingValueMassingStrategy
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Full")]
        Full = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Donut")]
        Donut = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"U")]
        U = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"L")]
        L = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"H")]
        H = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bar")]
        Bar = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum MassingOverrideAdditionValueMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Boundary")]
        Boundary = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Centerline")]
        Centerline = 1,
    
    }
}