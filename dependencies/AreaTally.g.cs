//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.1.21.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------
using Elements;
using Elements.GeoJSON;
using Elements.Geometry;
using Elements.Geometry.Solids;
using Elements.Spatial;
using Elements.Validators;
using Elements.Serialization.JSON;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using Line = Elements.Geometry.Line;
using Polygon = Elements.Geometry.Polygon;

namespace Elements
{
    #pragma warning disable // Disable all warnings

    /// <summary>A tally of the area deltas between targets + results</summary>
    [JsonConverter(typeof(Elements.Serialization.JSON.JsonInheritanceConverter), "discriminator")]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.21.0 (Newtonsoft.Json v13.0.0.0)")]
    public partial class AreaTally : Element
    {
        [JsonConstructor]
        public AreaTally(string @programType, Color? @programColor, double @areaTarget, double @achievedArea, double @distinctAreaCount, double? @targetCount, double? @achievedCount, string @cost, double? @seatCount, System.Guid @id = default, string @name = null)
            : base(id, name)
        {
            this.ProgramType = @programType;
            this.ProgramColor = @programColor;
            this.AreaTarget = @areaTarget;
            this.AchievedArea = @achievedArea;
            this.DistinctAreaCount = @distinctAreaCount;
            this.TargetCount = @targetCount;
            this.AchievedCount = @achievedCount;
            this.Cost = @cost;
            this.SeatCount = @seatCount;
            }
        
        
        // Empty constructor
        public AreaTally()
            : base()
        {
        }
    
        [JsonProperty("Program Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProgramType { get; set; }
    
        [JsonProperty("Program Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Color? ProgramColor { get; set; }
    
        [JsonProperty("Area Target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AreaTarget { get; set; }
    
        [JsonProperty("Achieved Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AchievedArea { get; set; }
    
        [JsonProperty("Distinct Area Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DistinctAreaCount { get; set; }
    
        [JsonProperty("Target Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TargetCount { get; set; }
    
        [JsonProperty("Achieved Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AchievedCount { get; set; }
    
        [JsonProperty("Cost", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cost { get; set; }
    
        /// <summary>Number of Seats or Desks in this space, if any.</summary>
        [JsonProperty("Seat Count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SeatCount { get; set; }
    
    
    }
}